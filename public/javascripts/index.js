// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(document).ready(function() {
    var ChatLog, ChatView, MsgModel, MsgView, chatView, socket;
    socket = io.connect('http://localhost');
    MsgModel = (function(_super) {

      __extends(MsgModel, _super);

      function MsgModel() {
        return MsgModel.__super__.constructor.apply(this, arguments);
      }

      MsgModel.prototype.defaults = {
        id: false,
        type: 'message',
        msg: "Some Message"
      };

      return MsgModel;

    })(Backbone.Model);
    ChatLog = (function(_super) {

      __extends(ChatLog, _super);

      function ChatLog() {
        return ChatLog.__super__.constructor.apply(this, arguments);
      }

      ChatLog.prototype.model = MsgModel;

      return ChatLog;

    })(Backbone.Collection);
    MsgView = (function(_super) {

      __extends(MsgView, _super);

      function MsgView() {
        return MsgView.__super__.constructor.apply(this, arguments);
      }

      MsgView.prototype.tagName = "p";

      MsgView.prototype.initialize = function() {
        return _.bindAll(this, "render");
      };

      MsgView.prototype.render = function() {
        $(this.el).attr('class', this.model.get('type'));
        $(this.el).append(this.model.get('msg'));
        return this;
      };

      return MsgView;

    })(Backbone.View);
    ChatView = (function(_super) {
      var self;

      __extends(ChatView, _super);

      function ChatView() {
        return ChatView.__super__.constructor.apply(this, arguments);
      }

      ChatView.prototype.el = $('#msgarea');

      self = ChatView;

      $("#chatForm").bind('submit', function(e) {
        e.preventDefault();
        if ($('#message').val() === '') {
          return;
        }
        self.sendMessage({
          msg: "<b>" + self.nick + "</b>: " + ($('#message').val()),
          type: 'message',
          id: MsgModel.prototype.defaults.id
        });
        return $('#message').val('');
      });

      ChatView.prototype.initialize = function() {
        _.bindAll(this, 'render', 'addMsg', 'appendMsg', 'sendMessage');
        this.collection = new ChatLog();
        this.collection.bind('add', this.appendMsg);
        return this.render();
      };

      ChatView.prototype.render = function() {
        self = this;
        $(this.el).html("<p class='system'>Connecting...</p>");
        return _(this.collection.models).each(function(item) {
          return self.appendMsg(msg);
        }, this);
      };

      ChatView.prototype.addMsg = function(data) {
        var msg;
        msg = new MsgModel(data);
        return this.collection.add(msg);
      };

      ChatView.prototype.appendMsg = function(msg) {
        var msgView;
        msgView = new MsgView({
          model: msg
        });
        $(this.el).append(msgView.render().el);
        return this.el.scrollTop(this.el[0].scrollHeight);
      };

      ChatView.prototype.sendMessage = function(data) {
        if (!data || !data.id) {
          return;
        }
        return socket.emit('message', data);
      };

      socket.on('id', function(data) {
        if (MsgModel.prototype.defaults.id === !data.id) {
          return MsgModel.prototype.defaults.id = data.id;
        }
      });

      socket.on('connect', function() {
        socket.emit('set nick', self.nick = prompt("Enter your username: "));
        return self.addMsg({
          type: "message",
          msg: "Welcome to RadonChat, your username is <b>" + self.nick + "</b>."
        });
      });

      socket.on('system', function(data) {
        if (data.id === MsgModel.prototype.defaults.id) {
          data.type = 'me';
        }
        return self.addMsg(data);
      });

      socket.on('cache', function(cache) {
        var data, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = cache.length; _i < _len; _i++) {
          data = cache[_i];
          _results.push(self.addMsg(data));
        }
        return _results;
      });

      return ChatView;

    })(Backbone.View);
    return chatView = new ChatView;
  });

}).call(this);
