// Generated by CoffeeScript 1.3.3
(function() {
  var app, cache, express, http, io, routes, server;

  express = require('express');

  routes = require('./routes');

  http = require('http');

  cache = [];

  app = express();

  app.set('env', 'development');

  server = http.createServer(app);

  io = require('socket.io').listen(server);

  app.configure(function() {
    app.set('views', __dirname + '/views');
    app.set('view options', {
      layout: false
    });
    app.engine('html', require('ejs').renderFile);
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(app.router);
    return app.use(express["static"](__dirname + '/public'));
  });

  app.configure('development', function() {
    return app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
  });

  app.configure('production', function() {
    return app.use(express.errorHandler());
  });

  app.get("/", routes.index);

  io.configure('production', function() {
    io.enable("browser client minification");
    io.enable("browser client etag");
    io.enable("browser client gzip");
    io.set("log level", 1);
    return io.set("transports", ["websocket", "flashsocket", "htmlfile", "xhr-polling", "jsonp-polling"]);
  });

  io.configure('development', function() {
    io.enable("browser client minification");
    io.enable("browser client etag");
    io.enable("browser client gzip");
    io.set("log level", 3);
    return io.set("transports", ["websocket", "flashsocket", "htmlfile", "xhr-polling", "jsonp-polling"]);
  });

  io.sockets.on('connection', function(socket) {
    socket.emit('id', {
      id: socket.id
    });
    socket.emit('cache', cache);
    socket.on('set nick', function(nick) {
      socket.set('nickname', ((nick != null) && nick !== "" ? nick : 'Guest'));
      return socket.get('nickname', function(err, nickname) {
        return socket.broadcast.emit('system', {
          type: "system",
          msg: "" + nickname + " has joined."
        });
      });
    });
    socket.on('message', function(msg) {
      if (cache.length > 10) {
        cache.shift();
      }
      cache.push(msg);
      return io.sockets.emit('system', msg);
    });
    return socket.on('disconnect', function() {
      return socket.get('nickname', function(err, nickname) {
        return socket.broadcast.emit('system', {
          type: "system",
          msg: "" + nickname + " has left."
        });
      });
    });
  });

  server.listen(80);

}).call(this);
